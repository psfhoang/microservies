version: '3.9'

services:
  config-server:
    container_name: config-server
    build:
      dockerfile: Dockerfile
      context: ./
    networks:
      - spring-cloud-network
    volumes:
      - .:/microservices
      - m2_data:/root/.m2/repository
    environment:
      - DIR=config-service
      - JAVA_OPTS=-Xms128M -Xmx256M
      - SERVER_PORT=8888
    working_dir: /microservices
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  discovery-server:
    container_name: discovery-service
    build:
      dockerfile: Dockerfile
      context: ./
    networks:
      - spring-cloud-network
    volumes:
      - .:/microservices
      - m2_data:/root/.m2/repository
    environment:
      - DIR=discovery-service
      - JAVA_OPTS=-Xms128M -Xmx512M
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - WAIT_SERVICE=config-server:8888
      - SERVER_PORT=8761
    working_dir: /microservices
    ports:
      - "8761:8761"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "512M"

  gateway:
    container_name: gateway-service
    build:
      dockerfile: Dockerfile
      context: ./
    networks:
      - spring-cloud-network
    volumes:
      - .:/microservices
      - m2_data:/root/.m2/repository
    environment:
      - DIR=gateway-service
      - JAVA_OPTS=-Xms128M -Xmx512M
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - WAIT_SERVICE=config-server:8888 discovery-server:8761
      - SERVER_PORT=8000
    working_dir: /microservices
    ports:
      - "8000:8000"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: "512M"

  auth:
    container_name: auth-service
    build:
      dockerfile: Dockerfile
      context: ./
    networks:
      - spring-cloud-network
    volumes:
      - .:/microservices
      - m2_data:/root/.m2/repository
    environment:
      - DIR=auth-service
      - JAVA_OPTS=-Xms128M -Xmx1024M
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - WAIT_SERVICE=config-server:8888 discovery-server:8761 gateway:8000
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/auth_server?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123456
      - SPRING_REDIS_HOST=redis
      - SERVER_PORT=8082
    working_dir: /microservices
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "1024M"

  inventory:
    container_name: inventory-service
    build:
      dockerfile: Dockerfile
      context: ./
    networks:
      - spring-cloud-network
    volumes:
      - .:/microservices
      - m2_data:/root/.m2/repository
    environment:
      - DIR=inventory-service
      - JAVA_OPTS=-Xms1024M -Xmx2024M
      - SPRING_CLOUD_CONFIG_URI=http://config-server:8888
      - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-server:8761/eureka/
      - WAIT_SERVICE=config-server:8888 discovery-server:8761 gateway-server:8000
      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql:3306/inventory?createDatabaseIfNotExist=true
      - SPRING_DATASOURCE_USERNAME=root
      - SPRING_DATASOURCE_PASSWORD=123456
      - SECURITY_OAUTH2_RESOURCE_
      - SPRING_REDIS_HOST=redis
      - SERVER_PORT=8088
    working_dir: /microservices
    deploy:
      resources:
        limits:
          cpus: "3"
          memory: "4096M"

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    environment:
      - RABBITMQ_DEFAULT_USER=root
      - RABBITMQ_DEFAULT_PASS=123456
    ports:
      - "5672:5672"
    networks:
      - spring-cloud-network

  mysql:
    image: mysql:5.7
    environment:
      - MYSQL_ROOT_PASSWORD=123456
    ports:
      - "3306:3306"
    networks:
      - spring-cloud-network
    volumes:
      - ./_mysql:/var/lib/mysql

  redis:
    image: redis:latest
    networks:
      - spring-cloud-network
    ports:
      - "6379:6379"
  neo4j:
    image: neo4j:latest
    networks:
      - spring-cloud-network
  nginx:
    container_name: nginx
    image: nginx:1.17.10
    networks:
      - spring-cloud-network
    ports:
      - "80:80"
    volumes:
      - ./_nginx:/etc/nginx/conf.d/
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.2.2
    ports:
      - "9200:9200"
    environment:
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9200" ]
      interval: 10s
      timeout: 5s
      retries: 10

  kibana:
    image: docker.elastic.co/kibana/kibana:5.2.2
    ports:
      - "5601:5601"
    environment:
      - "xpack.security.enabled=false"
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

  logstash:
    image: docker.elastic.co/logstash/logstash:5.2.2
    ports:
      - "25826:25826"
    volumes:
      - ./_elk-config:/elk-config
      - ./log:/log
    command: logstash -f /elk-config/logstash.config
    restart: on-failure
    depends_on:
      elasticsearch:
        condition: service_healthy

networks:
  spring-cloud-network:
    driver: bridge

volumes:
  m2_data: { }